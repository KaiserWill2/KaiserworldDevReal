###Thank You to the Kaiserreich Team who allowed us to use their system as a starting point, while we have made/will make slight adjustments to the system, without them it would have been much harder.

calculate_maximum_divisions = {
	### calculate base values - population and total factory count
	clear_variable = non_core_base
	set_variable = { base_units = 0 }
	set_variable = { base_states = num_owned_states }
	set_temp_variable = { factory_points = 0 }
	set_temp_variable = { mils = 0 }
	every_owned_state = {
		if = {
			limit = { is_core_of = ROOT }
			add_to_variable = { ROOT.base_units = state_population_k }
		}
		else = {
			add_to_variable = { ROOT.non_core_base = state_population_k }
		}
		add_to_temp_variable = { factory_points = industrial_complex_level }
		add_to_temp_variable = { factory_points = building_level@dockyard }
		add_to_temp_variable = { mils = arms_factory_level }
	}
	multiply_temp_variable = { mils = 1.5 } #mils are worth 1.5x as much as civs/navs
	add_to_temp_variable = { factory_points = mils }

	# non-cores only give 10% of the population
	if = {
		limit = { has_variable = non_core_base }
		divide_variable = { non_core_base = 10 }
		add_to_variable = { base_units = non_core_base }
		divide_variable = { non_core_base = 1000 } #for the tooltip
	}

	# base unit count = population / 1000
	divide_variable = { base_units = 1000 }
	set_variable = { base_population = base_units } #for the tooltip
	add_to_variable = { base_units = base_states }

	# calculate the modifier -- 1 + [ ( industry - population ) / ( industry + population ) ]
	set_variable = { divisor = factory_points }
	add_to_variable = { divisor = base_units }

	set_variable = { industry_factor = factory_points }
	subtract_from_variable = { industry_factor = base_units }
	divide_variable = { industry_factor = divisor }
	add_to_variable = { industry_factor = 1 }

	# minimum modifier -- x0.5
	clamp_variable = { var = industry_factor min = 0.5 }

	set_variable = { max_divisions = base_units }
	multiply_variable = { max_divisions = industry_factor }

	# +15% for faction leaders
	if = {
		limit = { is_faction_leader = yes }
		multiply_variable = { max_divisions = 1.15 }
	}
	# +10% per economy law level above civilian economy
	set_temp_variable = { economy_mult = 1 }
	add_to_temp_variable = { economy_mult = modifier@unit_limit_factory_bonus }
	multiply_variable = { max_divisions = economy_mult }

	# the lower limit is the number of owned states or 5, whichever is higher
	set_variable = { lower_limit = num_owned_states }
	clamp_variable = {
		var = lower_limit
		min = 5
		max = 500
	}

	# apply the lower limit
	set_variable = { net_max_divisions = max_divisions }
	round_variable = net_max_divisions
	clamp_variable = {
		var = max_divisions
		min = lower_limit
		max = 500
	}

	# add any specific bonuses to the limit
	set_variable = { additional_unit_limit = modifier@unit_limit_bonus }
	add_to_variable = { max_divisions = additional_unit_limit }

	round_variable = max_divisions
}

calculate_actual_division_number = {
	set_variable = { num_actual_divisions = num_divisions }
	subtract_from_variable = { num_actual_divisions = num_fake_intel_divisions }
	subtract_from_variable = { num_actual_divisions = num_expeditionary_divisions_received }
	add_to_variable = { num_actual_divisions = num_expeditionary_divisions_sent }
}

calculate_mobilisation_penalty = {
	set_variable = { mobilisation_penalty_var = num_divisions }
	divide_variable = { mobilisation_penalty_var = max_divisions }
	subtract_from_variable = { mobilisation_penalty_var = 1 }

	divide_variable = { mobilisation_penalty_var = 4 }
	clamp_variable = {
		var = mobilisation_penalty_var
		min = -0.25
		max = 0.25
	}

	set_variable = { mobilisation_penalty_var_positive = mobilisation_penalty_var }

	#for negative effects
	multiply_variable = { mobilisation_penalty_var = -1 }
}